package com.bit;

class Lec06{
	public Lec06(int a){ //디폴트 생성자가 안생김
		System.out.println("부모기능");
	}
	
}

public class Ex06 extends Lec06 {
	//부모의 기능을 쓰기 위해서는 부모의 객체가 존재해야 한다. non-static일때
	//이 생성자를 호출할때 이 a값을 결정을 해달라, 내가 임의로 못고르겠다 그냥 ()면 알아서하겠는데
	public Ex06() {
		super(1111); 
	}
	/*
	디폴트에 super() 없는 생성자는 Object 밖에 없음
	만약 둘다 디폴트면 사실 디폴트 생성자는
	public Ex06() { //생략
		super();    //생략   반드시 맨위에 호출 부모 객체가 생겨야 내 객체가 생기고 받고 생성자
	}					자바상속 실패의이유: 객체하나 찍어도 부모객체 전부찍음 두루루루
	                                   	다중상속이 안되서 이게 강제됨  -컴팩트한 상황에선 문제가됨
	
	일반적으로 super()생성자 안쓰지만 매개변수가 있는 생성자 밖에 없거나 써야되는 경우 사용함
	
	public Ex06() { //super()와 this는 공존할 수 없다. this()가 자기객체를 생성하는데 부모객체없인 못살아서 
		super();    
	}
	public Ex06(int a) { //this()가 없는 생성자가 1개는 있어야한다고했다 그게 super()있는거
		this();    
	}
	this.은 생성자로 생성된 객체의 주소, super.생성자로 생성된 부모의 주소
	*/
	
	//오버라이드는 진짜로 덮어쓴게 아니라 
	//상속을 쓰는 순간 객체가 추가로 찍힘으로 자원소모가 증가한다 그걸 감수할만한 메리트가 있어야 한다.
	//안쓰면 다른 자원을 더 쓴다거나
	//전제1. 클래스단위로 반복이 일어나야 한다 (클래스가 다수)
	public static void main(String[] args) {
		Ex06 me=new Ex06();
		me.func01();
	}

}
